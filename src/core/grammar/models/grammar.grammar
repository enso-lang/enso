import expr.grammar

  start Grammar

  Grammar ::= [Grammar] "start" \start:<root.rules[it]> /2 rules:Rule* @/2

  Rule ::= [Rule] name:sym "::=" arg:Alt
         | [Rule] "abstract" name:sym

  Alt ::= [Alt] > alts:Create+@(/ "|") <

  Create ::= [Create] "[".name:sym."]" arg:Sequence
    | Sequence

  Sequence ::= [Sequence] elements:Field*

  Field ::= [Field] name:sym.":".arg:Pattern
    | Pattern
  
  Pattern ::= 
      [Value] kind:"int"
    | [Value] kind:"str"
    | [Value] kind:"real"
    | [Value] kind:"sym"
    | [Value] kind:"atom"
    | [Code] "{" expr:Expr "}"
    | [Ref] "<".path:Expr.">"
    | [Lit] value:str
    | [Call] rule:<root.rules[it]>
    | [Regular] arg:Pattern."*" Sep? { (optional == true) and (many == true) }
    | [Regular] arg:Pattern."?" { optional == true }
    | [Regular] arg:Pattern."+" Sep? { many == true }
    | [NoSpace] .".".
    | [Break] "/" (.lines:int | { lines==1 })
    | [Indent] ">" { indent==1 }
    | [Indent] "<" { indent==(-1) }
    | [Hide] "#" arg:Pattern
    | "(".Alt.")"
    
  Sep ::= "@".sep:Pattern

  Expr ::=