import expr.schema

class Schema
  types! Type*
  classes: Class* = types.select() { |t| t is Class }
  primitives: Primitive* = types.select() { |t| t is Primitive }

class Type
  name# str
  schema: Schema / types
  key: Field? = nil
 
class Primitive < Type
 
class Class < Type
  supers: Class*
  subclasses: Class* / supers
  defined_fields! Field*
  key: Field? = fields.find() {|f| f.key}
  fields: Field* = all_fields.select() {|f| not f.computed}
  all_fields: Field* = (supers.flat_map() {|s| s.all_fields })
  										    .union(defined_fields)

class Field
  name# str
  owner# Class / defined_fields
  type: Type
  optional: bool
  many: bool
  key: bool
  auto: bool
  inverse: Field? / inverse 
  computed! Expr?
  traversal: bool

class Expr

primitive str
primitive int
primitive bool
primitive real
