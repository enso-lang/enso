import impl.grammar

start Schema

Schema ::= [Schema] types:TypeDef* @/2

TypeDef ::= Primitive | Class

Primitive ::= [Primitive] "primitive" name:sym
  
Class ::= [Class] "class" name:sym Parent? /> 
                     defined_fields:Field* @/ </
Parent ::= "<" supers:Super+ @","
Super ::= <root.classes[it]>

Field ::= [Field] name:sym.Kind type:<root.types[it]> Multiplicity? Annot?

Kind ::= "#" { key == true }
      |  "!" { traversal == true }
      |  ":"

Multiplicity ::= ."*" { (many == true) and (optional == true) }
	       | ."?" { optional == true } 
	       | ."+" { many == true }

Annot ::= "/" inverse:<this.type.fields[it]>
        | "=" computed:Expr

abstract Expr