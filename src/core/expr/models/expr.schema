class Expr 

class ETernOp < Expr
  op1: str
  op2: str
  e1! Expr
  e2! Expr
  e3! Expr

class EBinOp < Expr
  op: str
  e1! Expr
  e2! Expr

class EUnOp < Expr
  op: str
  e! Expr

class InstanceOf < Expr
  base! Expr
  class_name: str

class EFunCall < Expr
  fun! Expr
  params! Expr*

class EField < Expr
  e! Expr
  fname: str

class EVar < Expr
  name: str

class ESubscript < Expr
  e! Expr
  sub! Expr

// data constructors

class EList < Expr
  elems! Expr*

class EAddress < Expr
  e! Expr

class ENew < Expr
  \class: str

// constants

class EConst < Expr
class EStrConst < EConst
  val: str
  type: str = "str"

class EIntConst < EConst
  val: int
  type: str = "int"

class EBoolConst < EConst
  val: bool
  type: str = "bool"

class ERealConst < EConst
  val: real
  type: str = "real"

class ENil < EConst

primitive str
primitive int
primitive bool
primitive real
