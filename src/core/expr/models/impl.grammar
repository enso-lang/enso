import expr.grammar

start EBlock_nocurly

Command ::= EWhile
          | EFor
          | EIf
          | ESwitch
          | EFunCall
          | EAssign
          | EImport
          | EBlock
          | Expr

NLCommand ::=	EBlock
					  | /> Command </
					  
EWhile ::= [EWhile] "while" cond:Expr body:NLCommand
EFor ::= [EFor] "for" var:sym ":" list:Expr body:NLCommand
EIf ::= [EIf] "if" cond:Expr "then" body:NLCommand ("else" body2:NLCommand)?
ESwitch ::= [ESwitch] "switch" e:Expr
EFunDef ::= [EFunDef] "def" name:sym . "(". formals:Formal* @(.",") .")" body:NLCommand
EAssign ::= [EAssign] var:Expr "=" val:Expr
EImport ::= [EImport] "require" path:str

EBlock ::= "{" /> EBlock_nocurly /< "}"
EBlock_nocurly ::= [EBlock] (fundefs:EFunDef+@/ /)? body:NLCommand*@(.";"/) 

abstract Expr
