import expr.grammar

start S  

S ::= [Schema] "package" classes:Sup /  
               "import schema.Many" / 
               classes:C* @/

C ::= [Class] "interface" Name (":" supers:Sup+ @",")? ("{"/>
      defined_fields:F+ @/
      </ "}")?
      
Sup ::= [Class] Name
Name ::= {name=="val"} "value" 
       | {name=="var"} "varx" 
       | {name=="fun"} "function" 
       | {name=="class"} "cls" 
       | {name=="in"} "ins"
       | {name=="out"} "outs"
       | name:sym 

F ::= [Field]  (Computed | Many | Single)  // Override

Computed ::= "val" #(computed:Expr). Name ":" Comp
Many ::=  "val" {many} Name ":" "Many" P
Single ::= "var" Name ":" type:TN Opt?
Comp ::= "List" P {many} | type:TN Opt?
Override ::= "override" {(((owner.supers).flat_map() {|s| s.all_fields }).find(name)) != nil} 
P ::= ."<". type:TN .">"
Opt ::= ."?" {optional}

TN ::= [Class] Name
     | [Primitive] ("String" {name=="str"}
                   | "Int" {name=="int"}
                   | "Boolean" {name=="bool"}
                   | "Float" {name=="real"}
                   | "DateTime" {name=="date"}
                   | "UNKNOWN" )

