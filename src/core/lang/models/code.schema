
class Module
  name: str
  requires! Require*
  defs! Def*
  main! Seq?
  
class Require
  name# str
  path: str
  
class Def
  name#   str?  

class Mixin < Def
  meta!   LeafDef*
  defs!   LeafDef*
  includes! Ref*

class Class < Mixin
  parent: Ref?

class LeafDef < Def

class Attribute < LeafDef
  kind: str  // attr_writer, attr_reader, attr_accessor

class Binding < LeafDef
  value!  Expr

class Expr
  
class Ref < Expr
  module: str?
  name: str

class EBinOp < Expr
  op: str
  e1! Expr
  e2! Expr

class EUnOp < Expr
  op: str
  e! Expr
    
class Seq < Expr
  statements! Expr*

class Index < Expr
  base! Expr
  index! Expr

class Prop < Expr
  target! Expr
  property: str
  
class Call < Expr
  target! Expr?
  method: str?
  args!   Expr*
  rest!   Expr?
  block!  Expr?
  num_args: int = args.size + (block ? 1 : 0)

class Super < Expr

class Fun < Expr
  args! Decl*
  block: str?     
  rest: str?      
  locals! Decl*
  body! Expr
  num_args: int = args.size + (block ? 1 : 0)

class Decl
  name: str
  default! Expr?

class Assign < Expr
  to!   Expr
  from! Expr

class If < Expr
  cond! Expr
  sthen! Expr
  selse! Expr?

class Switch < Expr
  subject! Expr
  cases! Case*
  
class Case 
  values! Lit*
  body! Expr
  
class While < Expr
  cond! Expr
  body! Expr

class Rescue < Expr
  base! Expr
  rescues! Handler*
  ensure! Expr?
 
class Handler
  kind: str?
  var: str?     // Decl
  body! Expr  

class Var < Expr
  name: str   // Decl
  kind: str?

class List < Expr
  items!  Expr*

class Record < Expr
  fields! Binding*

class Lit < Expr
  value: atom

primitive atom
primitive str
primitive int
primitive bool
