start Program

Program ::= [Module] "'use strict'" /2
                     "////" name:sym "////"/2
                     "var cwd = process.cwd() + '/';" /
                     requires:Require* /2
                     "var" name:sym.";" /2
                     defs:Def* @/2 /2
                     name:sym "= {"/> 
                        defs:Export* @/
                     </"};"/
                     "module.exports =" name:sym ";"
Require ::= [Require] "var" name:sym "= require(cwd +" path:str .");"/          

Export ::= ExportName | Binding
ExportName ::= name:sym .":" name:sym ."," /

Def     ::= Class | Mixin | "var" BindingB
Binding  ::= [Binding] name:sym .":" (value:Function | value:Expr | "MISSING") .","/2
  Function ::= "function" MethHeader FunBody
  
Class   ::= [Class] "class" name:sym Parent? "{"/> 
                      "static new(...args) { return new" name:sym ."(...args) };" /2
                       Meta? 
                       Body 
                    </"};" /2 
Parent ::= "extends Enso.mix(". parent:Ref ."," includes:Ref+ @(.",") .")"
         | "extends Enso.mix(Enso.EnsoBaseClass," includes:Ref+ @(.",") .")"
         | "extends" parent:Ref
Mixin   ::= [Mixin] "function" name:sym ."(parent) {"/>
                 "return class" MixParent "{"/> 
                      Meta? Body <<"}};" 
MixParent ::= "extends Enso.mix(parent," includes:Ref+ @(.",") .")"
         | "extends parent"
Body    ::= defs:DefB* @/2
Meta    ::= meta:MDefB+ @/2 /2
  MDefB    ::= "static" BindingM | "static" BindingB
DefB     ::= Attribute | BindingM | "this.".BindingB
BindingM  ::= [Binding] MethodSym . Method .";"
BindingB  ::= [Binding] name:sym "=" value:Expr .";"
MethodSym ::= {name=="[]"} "get$" | {name=="[]="} "set$" | name:sym
Method   ::= value:MethHeader ({name == "constructor"} value:ConsBody | value:FunBody)
  MethHeader ::= [Fun] Params "{" /> Locals?
    Locals ::= "var" locals:Decl+ @(.",") .";" /
  Decl     ::= [Decl] name:sym ("=" default:Expr)?
  FunBody ::= [Fun] body:SeqBodyR </"}"
  ConsBody ::= [Fun] body:SeqBody </"}"  
   
Attribute ::= [Attribute] ({ kind=="attr_reader" } Reader 
                         | { kind=="attr_writer" } Writer 
                         | { kind=="attr_accessor" } Reader / Writer)
Reader  ::= name:sym."() { return this.". name:sym ."$ };"
Writer  ::= "set_".name:sym."(val) { this.". name:sym ."$ = val };"

Seq     ::= "{"/> SeqBody </"}"
SeqBody     ::= [Seq] statements:Statement* @/ | Statement
SeqR     ::= "{"/> SeqBodyR </"}"
SeqBodyR     ::= [Seq] statements:StatementLR* @/ | StatementR

Statement ::= Basic | Expr .";"
StatementR ::= BasicR | "return" Expr .";"
StatementLR ::= {_last} StatementR | Statement
Basic   ::= If | While | TryCatch | Switch
If      ::= [If] "if (". cond:Expr .")" sthen:Seq ("else" (selse:If | selse:Seq))?
While   ::= [While] "while (". cond:Expr .")" body:Seq
Switch  ::= [Switch] "switch (". subject:Expr .") {"/> cases:Case* </"}"
  Case ::= [Case] Options > body:SeqBody / "break;" /<
  Options ::= values:("case" Lit .":" /)+ | "default:" /
TryCatch ::= [Rescue] "try" base:Seq rescues:Handler* ("finally" ensure:Seq)? 
Handler ::= [Handler] "catch (". (var:sym | "DUMMY") .")" body:Seq // TODO: deal with kind:str!!!

BasicR   ::= IfR | While | TryCatchR | SwitchR
IfR      ::= [If] "if (". cond:Expr .")" sthen:SeqR ("else" (selse:IfR | selse:SeqR))?
SwitchR  ::= [Switch] "switch (". subject:Expr .") {"/> cases:CaseR* </"}"
  CaseR ::= [Case] Options > body:SeqBodyR /<
TryCatchR ::= [Rescue] "try" base:SeqR rescues:HandlerR* ("finally" ensure:Seq)? 
HandlerR ::= [Handler] "catch (". (var:sym | "DUMMY") .")" body:SeqR // TODO: deal with kind:str!!!

Expr ::= IndexAssign | CallAssign | Assign
IndexAssign ::= [Assign] to:([Index] base:Primary) ".set$(". to:([Index] index:Expr) ."," from:Assign .")"
CallAssign ::= [Assign] to:([Call] target:Primary) .".set_". to:([Call] method:sym) ."(". from:Assign .")"
Assign ::= [Assign] to:Primary "=" from:Expr
        | IfE
IfE      ::= [If] cond:EOr /> "?" sthen:EOr / ":" selse:EOr <
        | EOr
EOr ::= [EBinOp] e1:EAnd op:"||" e2:EOr
       | EAnd
EAnd ::= [EBinOp] e1:EBinOp1 op:"&&" e2:EAnd
        | EBinOp1
EBinOp1 ::= [EBinOp] e1:EBinOp2 (op:"==" | op:"!=") e2:EBinOp1
         | EBinOp2
EBinOp2 ::= [EBinOp] e1:EBinOp3 (op:">" | op:"<" | op:">=" | op:"<=") e2:EBinOp2
         | EBinOp3
EBinOp3 ::= [EBinOp] e1:EBinOp3 (op:"<<" | op:">>" | op:"++") e2:EBinOp4
         | EBinOp4
EBinOp4 ::= [EBinOp] e1:EBinOp5 (op:"+" | op:"-") e2:EBinOp4
         | EBinOp5
EBinOp5 ::= [EBinOp] e1:EUnOp (op:"*" | op:"/" | op:"%") e2:EBinOp5
         | EUnOp
EUnOp ::= [EUnOp] (op:"!" | op:"-") e:EUnOp
        | EBinOp6
EBinOp6 ::= [EBinOp] {op=="**"} "Math.pow(". e1:EOr ."," e2:EOr .")"
         | Primary


Primary ::= InstVar | ClassVar | Nil | Var | Ref | Super |  List | Index | Record | Fun | Prop | Call | Lit | "(". Expr .")" | 
             "((function()" SeqR .")())"
InstVar ::= [Var] "self.". name:sym."$" { kind=="@" }
ClassVar::= [Var] "this.constructor.". name:sym."$$" { kind=="@@" }
Nil     ::= [Var] "null" { name == "nil" }
Var     ::= [Var] name:sym
Ref     ::= [Ref] (module:sym.".".)? name:sym
List    ::= [List] "[". items:Expr* @(.",") ."]"
Index   ::= [Index] base:Primary .".get$(". index:Expr .")"
Record  ::= [Record] "Enso.EMap.new(". ("{".fields:Field+ @(.",") ."}")?.")"
  Field   ::= [Binding] name:sym.":" value:Expr
Lit     ::= [Lit] value:atom
  Super ::= [Super] "super"

Prop      ::= [Prop] target:Primary .".". property:sym
Call      ::= [Call] Target . Args
  Target  ::= {method=="call"} target:Primary 
            | (target:Primary .".".)? method:sym
  // blocks come first, rather than at the end as in Ruby
  Args    ::= "(". B BA A AR R .")"
		A ::= args:Expr* @(.",")
		R ::= ("...".rest:Expr)?
		B ::= block:Primary?
  BA ::= (."," { block != nil and (args.size > 0 or rest != nil) })?
  AR ::= (."," { args.size > 0 and rest != nil })?
  
Fun     ::= [Fun] "function". Params "{"/> Locals? body:SeqBodyR </"}"
  // blocks come first, rather than at the end as in Ruby
  Params  ::= "(". FB BA FA AR FR .")"
    FA ::= args:Decl* @(.",")
    FR ::= ("...".rest:sym)?
    FB ::= block:sym?
