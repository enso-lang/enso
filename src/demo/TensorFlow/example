# Parameters
const learning_rate = 0.01
const training_epochs = 1000
const display_step = 50

# Training Data
data train_X = [3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,
                         7.042,10.791,5.313,7.997,5.654,9.27,3.1]
data train_Y = [1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,
                         2.827,3.465,1.65,2.904,2.42,2.94,1.3]
const n_samples = train_X.shape(0)

# Set model weights
prior W : float = random()      // W = tf.Variable(rng.randn(), name="weight")
prior b : float = random() 			// b = tf.Variable(rng.randn(), name="bias")

# Construct a linear model
fun prediction X => X*W + b              // prediction = tf.add(tf.multiply(X, W), b)

# Mean squared error
fun cost X Y => [y**2 | y <- prediction X - Y].sum / (n_samples*2)   // cost = tf.reduce_sum(tf.pow(prediction-Y, 2))/(2*n_samples)
# Gradient descent

fun optimize X Y => train.GradientDescentOptimizer(learning_rate).minimize(cost)

# Start training

session

    # Fit all training data
    for epoch in [1..training_epochs]
        for (x, y) in zip(train_X, train_Y):
            optimize x y

        # Display logs per epoch step
        if (epoch+1) % display_step == 0:
            c = cost(train_X, train_Y)  // what is it doing here?
            print("Epoch:", '%04d' % (epoch+1), "cost=", "{:.9f}".format(c), \
                "W=", W, "b=", b)

    print("Optimization Finished!")
    training_cost = (cost train_X, train_Y)
    print("Training cost=", training_cost, "W=", W, "b=", b, '\n')

    # Testing example, as requested (Issue #2)
    data test_X = [6.83, 4.668, 8.9, 7.91, 5.7, 8.7, 3.1, 2.1]
    data test_Y = [1.84, 2.273, 3.2, 2.831, 2.92, 3.24, 1.35, 1.03]

    print("Testing... (Mean square loss Comparison)")
    
    testing_cost = (cost test_X test_Y)

    print("Testing cost=", testing_cost)
    print("Absolute mean square loss difference:", abs(training_cost - testing_cost))

